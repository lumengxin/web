                 javascript教程-廖雪峰
1.快速入门
	1.1基本语法
	。js代码可在网页任何位置，通常<head>中,网站优化<body>最后；.js文件引入。
	。常用工具：vsCode,sublime text,chrome...
	。；结束（不强求，最好加），js严格区分大小写
	1.2数据类型和变量
	。Number:整数和浮点数 0x十六进制
	。浮点数：'',""
	。布尔值：true,false
	。null:'空'值，和0及''区分;
	 undefined:未定义
	。数组：var arr = [];
	。对象：一组由键-值组成的无序集合。
	 键都是字符串类型，值可以是任意数据类型，键又称为对象的属性。
	。变量：申明一个变量用var语句 var x = 3;变量名是大小写英文、数字、$和_的组合，且不能用数字开头
	。strict模式（js不强求var声明，无声明升级为全局）：'use strict'，ECMA规范
	1.3字符串
	。转义字符：\n,\t,\\
	。多行字符串：`...`(es6)
	。模板字符串：+连接；`dfai,${name}`(es6)
	。操作字符串：toUpperCase(),toLowerCase(),indexOf(),substring(0,2)...
	1.4数组
	。Array可包含任意数据类型，索引访问；
	 var arr = [1,2,3];
	 length赋值会导致Array大小变化,可索引赋值，越界
	。slice():截取Array的部分元素，然后返回一个新的Array
	。push():向Array的末尾添加若干元素
	  pop():删除最后一个
	  unshift():往Array的头部添加若干元素
	。sort():排序
	。reverse():反转，即倒置
	。splice():修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素
	。join():把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串
	1.5对象
	。一种无序的集合数据类型，它由若干键值对组成
	。访问属性通过‘.’操作符
	 person['name']或person.name
	。JavaScript的对象是动态类型，可自由地给一个对象添加或删除属性
	。查看属性是否自身拥有：person.hasOwnProperty('name');或者'name' in person(可能是继承的)
	1.6条件判断
	。if...else
	。if...else if...else
	1.7循环
	。for循环：常用索引便利数组
	。for...in：把一个对象的所有属性依此循环出来
	  过滤继承属性 if(o.hasOwnProperty(key)){...}
	。while循环：只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环
	。do...while：和while循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件，至少一次
	1.8Map和Set
	。Map:是一组键值对的结构，具有极快的查找速度
	。Set:和Map类似，也是一组key的集合，但不存储value,key无重复
	。iterable:(遍历Array可以采用下标循环，遍历Map和Set就无法使用下标),array、map、set属于iterable
	  可通过for...of循环遍历

2.函数
	2.1函数的定义和调用
	。定义：function abc(x) {...},函数也是对象，abc()即函数对象，abc可视作指向该函数的变量;
	  <=> var abc = function(x) {...};
	。调用函数：多传参无影响
	。arguments：只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数，类似Array,
	  可以获得调用者传入的所有参数,常用于判断传入参数的个数
	。rest参数：只能写在最后，前面用...标识，多余的参数以数组形式交给变量rest
	  function foo(a,b,...rest) {...}
	  foo(1,2,3,4,5) => Array[3,4,5]
	2.2变量的作用域与解构赋值
	。变量在函数体内部申明，则该变量的作用域为整个函数体，外不可引用
	。变量提升：js会扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部；提升变量的声明，但不会提升变量的赋值
	  在函数内部定义变量时，应严格遵守“在函数内部首先申
	  所有变量”这一规则（var声明内部所有用到的变量）
	。全局作用域：不在任何函数内定义的变量就具有全局作用域；
	js默认window全局对象，全局作用域的变量实际上被绑定到window的一个属性
	。命名空间：减少命名冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中
	。局部作用域：js变量作用域实际上是函数内部,for等循环语句块中是无法定义具有局部作用域的变量；用let替代var可以申明一个块级作用域的变量（es6）
	。常量：const,块级作用域
	。解构赋值：同时对一组变量进行赋值；
	  var [x,y,z] = ['css','js','html'];
	2.3方法
	。在一个对象中绑定函数，称为这个对象的方法
	  this:一个特殊变量,在一个方法内部始终指向当前对象
	  var that = this; // 在方法内部一开始就捕获this,解决this指向不明
	。apply:用来控制this指向
	。修饰器：利用apply()，还可以动态改变函数的行为；
	  js的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数
	2.4高阶函数
	。定义：一个函数接收另一个函数作为参数，这种函数就称之为高阶函数
	2.5map/reduce
	。map:map()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array
	。reduce:Array的reduce()把一个函数作用在这个Array上
	2.6filter
	。filter:用于把Array的某些元素过滤掉，然后返回剩下的元素
	。回调函数
	2.7sort
	。排序，核心比较两个元素的大小
	。Array的sort()方法默认把所有元素先转换为String再排序
	。sort()方法也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序
	2.8Array
	。对于数组，除了map()、reduce、filter()、sort()这些方法可以传入一个函数外，Array对象还提供了很多非常实用的高阶函数。
	。every():可以判断数组的所有元素是否满足测试条件
	。find()：用于查找符合条件的第一个元素，如果找到了，返回这个元素，否则，返回undefined
	。findIndex()：和find()类似，也是查找符合条件的第一个元素，不同之处在于findIndex()会返回这个元素的索引，如果没有找到，返回-1
	。forEach()：和map()类似，它也把每个元素依次作用于传入的函数，但不会返回新的数组
	2.9闭包
	。函数作为返回值：高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回
	。闭包：一个函数返回了一个函数后，其内部的局部变量还被新函数引用
	2.10箭头函数
	。Arrow Funciton: x => x * x
	  <=> function(x) { return x*x; }
	。箭头函数相当于匿名函数，简化定义 x => {...}
	  (x,y) => x*x + y*y //两个参数
	  (x,y,...rest) => {...} //可变参数
	。this:箭头函数内部的this是词法作用域，由上下文确定
	2.11generator
	。generator:生成器，es6引入的新数据类型
	。generator由function*定义（注意多出的*号），并且，除了return语句，还可以用yield返回多次
	。调用generator对象有两个方法，一是不断地调用generator对象的next()方法；for ... of循环迭代generator对象，这种方式不需要我们自己判断done
	。generator另一个巨大的好处，把异步回调代码变成“同步”代码

3.标准对象
	3.1基本
	。js中，一切都是对象，typeof 123; //获取对象类型，返回字符串
	。包装对象：var n = new Number(123); //new创建，类型变为object
	  包装对象和原始值用===比较会返回false(少用)
		。。不要使用new Number()、new Boolean()、new String()创建包装对象
		。。用parseInt()或parseFloat()来转换任意类型到number
		。。用String()来转换任意类型到string，或者直接调用某个对象的toString()方法
		。。判断某个全局变量是否存在用typeof window.myVar === 'undefined'
	3.2Date
	。js中，Date对象是用来表示日期和时间
	  var now = new Date(); //获取系统当前时间
	。var d = Date.parse(''2018-06-24T19:49:22.875+08:00'');
	  d;  //1529840962875 返回一个Number时间戳
	  var d = new Date(1529840962875); d; //Date
	。时区：Date对象表示的时间总是按浏览器所在时区显示的，可设置；d.toLocaleString();d.toUTCString();
	。时间戳：一个自增的整数，它表示从1970年1月1日零时整的GMT时区开始的那一刻，到现在的毫秒数，可精确地表示一个时刻，与时区无关
	  可以传递时间戳，或者把时间戳从数据库里读出来，再让js自动转换为当地时间
	  Date.now(); //获取当地时间戳
	3.3RegExp
	。正则表达式：是一种用来匹配字符串的强有力的武器
	。直接给出字符，就是精确匹配
	  \d 一个数字；\w 一个数字或字母
	  . 任意字符 ； * 任意个字符
	  + 至少一个 ； ？ 0或1个
	  {n} n个    ;  {n,m} n到m个
	。进阶：精确匹配 [] 表示范围
	  [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线
	  A|B可以匹配A或B
	  ^表示行的开头，^\d表示必须以数字开头
	  $表示行的结束，\d$表示必须以数字结束
	。RegExp:js中创建正则表达式。直接 /正则表达式/写；new RegExp('正则表达式')创建对象
	  var re = /^\d{3}\-\d{3,8}$/;
	  re.test('121-12345');  //true

	。切分字符串：'a,b;; c  d'.split(/[\s\,\;]+/); // ['a', 'b', 'c', 'd']
	。分组：除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能，用()表示的就是要提取的分组
	  var re = /^(\d{3})-(\d{3,8})$/;
	  re.exec('010-12345'); // ['010-12345', '010', '12345']
	  （exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串）
	。贪婪匹配：正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符
	。全局搜索：g,表示全局匹配
	3.4JSON
	。JSON:JavaScript Object Notation的缩写，它是一种数据交换格式
	。字符集必须是UTF-8，支持多语言
	。为了统一解析，JSON的字符串规定必须用双引号""，Object的键也必须用双引号""
	。js内置JSON的解析，js对象序列化为json,通过网络传递；json字符串反序列化为js对象使用
	。序列化：var s = JSON.stringify(person(,null,` `));
	。反序列化：拿到一个JSON格式的字符串，直接用JSON.parse()把它变成一个js对象,JSON.parse()还可以接收一个函数，用来转换解析出的属性
	  JSON.parse('1.1'); //1.1
	  var obj = JSON.parse('{"name":"xin","age":12}', function(key,value){
	  	...
	  });

4.面向对象编程
	4.1js面向对象
	。类和实例是大多数面向对象编程语言的基本概念，js不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程
	4.2创建对象
	。js对每个创建的对象都会设置一个原型，指向它的原型对象,向上查找至Object.prototype对象，还没有则返回undefined
	  var arr = [1,2];
	  arr-Arrar.prototype-Object.prototype=>null
	  Array.prototype定义了indexOf()、shift()等方法，因此你可以在所有的Array对象上直接调用这些方法
	。构造函数：除了直接用{ ... }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象
	  先定义一个构造函数 function Ss(name) { this.name=name;}
	  再用new调用 var xin = new Ss('xin');xin.name;
	4.3原型继承
	。定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this
	。借助中间函数F实现原型链继承，最好通过封装的inherits函数完成
	。继续在新的构造函数的原型上定义新方法
	4.4class继承
	。新的关键字class从ES6开始正式被引入到JavaScript中，目的使定义类更简单
	  class Student {
	  	constructor(name) {
	  		this.name = name;
	  	}
	  	hello() {
	  		alert('Hello,' + this.name + '!');
	  	}
	  }
	。class继承：extends实现

5.浏览器
	5.1浏览器对象
	。widows:不但充当全局作用域，而且表示浏览器窗口
	  innerWidth和innerHeight属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高
	  outerWidth和outerHeight属性，可以获取浏览器窗口的整个宽高
	。navigator:表示浏览器的信息
	  navigator.appName：浏览器名称
	  navigator.appVersion：浏览器版本
	  navigator.platform：操作系统类型
	。screen：表示屏幕的信息
	。location：表示当前页面的URL信息，location.href获得URL各个部分的值
	  要加载一个新页面，可以调用location.assign()，如果要重新加载当前页面，调用location.reload()方法非常方便
	。document：表示当前页面，由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点
	  getElementById()、getElementsByTagName()：可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点
	  document.cookie：读取到当前页面的Cookie
	。history:保存了浏览器的历史记录
	  back()或forward ():相当于用户点击了浏览器的“后退”或“前进”按钮
	5.2操作DOM
	。HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过js来操作DOM
	。常用操作：更新，遍历，添加，删除
	。document.getElementById()可以直接定位唯一的一个DOM节点
	  document.getElementsByTagName()和document.getElementsByClassName()总是返回一组DOM节点。要精确地选择DOM，可以先定位父节点，再从父节点开始选择，以缩小范围
	  第二种方法是使用querySelector()和querySelectorAll()
	5.3更新DOM
	。innerHTML：可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树
	。innerText/textContent：可以自动对字符串进行HTML编码，保证无法设置任何HTML标签
	。CSS修改，DOM节点的style属性对应所有的CSS，可以直接获取或设置。CSS允许font-size这样的名称，但它并非js有效的属性名，需要改写为驼峰式命名fontSize
	  var p = document.getElementById('p1');
	  p.style.fontSize = '10px';
	5.4插入DOM
	。innerHTML
	。appendChild
	。insertBefore
	5.5删除DOM
	。要删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的removeChild把自己删掉
	  var parent = document.getElementById('parent');
	  parent.removeChild(parent.children[0]);
	5.6操作表单
	。类似DOM操作，表单也是DOM树
	。获取值
	  var input = document.getElementById('email');
	  input.value;
	。设置值 input.value= "...";
	。提交表单：
	  1）通过<form>元素的submit()方法，响应一个button的click事件
	  2）响应<form>本身的onsubmit时间<button type="submit">
	  pwd.value = toMD5(pwd.value); //加密,会从*变为***
	  <!-- 没有name属性的input数据不会被提交 -->
	  <input type="password" id="input-password">
      <input type="hidden" id="md5-password" name="password">  
      var input_pwd = document.getElementById('input-password');
      var md5_pwd = document.getElementById('md5-password');
      // 把用户输入的明文变为MD5:
      md5_pwd.value = toMD5(input_pwd.value);
    5.7操作文件
    。html表单中，唯一上传文件的控件<input type="file"> enctype="multipart/form-data" method="post";value赋值无效，js无法获取文件的真实路径
    。File API：HTML5的File API提供了File和FileReader两个主要对象，可以获得文件信息并读取文件
    。回调：js中，浏览器的JavaScript执行引擎在执行JavaScript代码时，总是以单线程模式执行；执行多任务实际上都是异步调用
    5.8AJAX
    。用JavaScript执行异步网络请求，AJAX请求是异步执行的，要通过回调函数获得响应
    。在现代浏览器上写AJAX主要依靠XMLHttpRequest对象
    var request = new XMLHttpRequest();
    ...
    request.open('GET','api/cas'); //open()方法三个参数，GET/POST,URL,是否异步（默认true)
    request.send();   //正真发送请求
    。安全限制：由于浏览器同源策略，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致
      1）通过Flash插件发送http请求
      2）通过在同源域名下架设一个代理服务器来转发，JavaScript负责把请求发送到代理服务器
      '/proxy?url=http://www.sina.com.cn'
      3)JSONP,有限制，只能用GET请求，并且要求返回JavaScript
    。CORS:是HTML5规范定义的如何跨域访问资源
      跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的Access-Control-Allow-Origin:(your url)
    5.9Promise
    。js中，所有代码都是单线程执行的。由于这个“缺陷”，导致js的所有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现
    5.10Canvas
    。HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等；有了canvas,可以通过js完成绘制

6.jQuery
	6.1介绍
	。特点：消除浏览器差异，简洁的操作DOM的方法，轻松实现动画、修改CSS等各种操作
	。使用：在页面的<head>引入jQuery文件即可
	。$符号：jQuery把所有功能全部封装在一个全局变量jQuery中，而$也是一个合法的变量名，它是变量jQuery的别名
	  window.jQuery;  //jQuery
	  window.$;   //jQuery
	  $ === jQuery;   //true
	  typeof($);  //function
	  $本质上就是一个函数，但是函数也是对象，于是$除了可以直接调用外，也可以有很多其他属性
	6.2选择器
	。选择器是jQuery的核心。一个选择器写出来类似$('#dom-id')
	。按ID查找
	//查找<div id="abc">
	//返回jQuery对象类似数组,它的每个元素都是一个引用了DOM节点的对象[<div id="abc">...</div>] 
	var div = $('#abc');
	jQuery对象和DOM对象之间可以互相转化：
	var div = $('#abc'); // jQuery对象
	var divDom = div.get(0); // 假设存在div，获取第1个DOM元素
	var another = $(divDom); // 重新把DOM包装为jQuery对象
	。按tag查找：写上tag名称就可以了
	var ps = $('p'); 
	ps.length;
	ps.get(3);
	。按class查找
	var a = $('.red'); // 所有节点包含`class="red"`都将返回
	。按属性查找
	var email = $('[name=email]'); // 找出<??? name="email">
	var icons = $('[name^=icon]'); // 找出所有name属性值以icon开头的DOM
	。组合查找：把上述简单选择器组合起来使用
	var emailInput = $('input[name=email]'); // 不会找出<div name="email">
	。多项选择器：把多个选择器用,组合起来一块选
	$('p,div'); // 把<p>和<div>都选出来
	6.3层级选择器
	。层级之间用空格隔开 $('ul.ulclass li.liclass');
	。子选择器：层级关系必须是父子关系 >
	。过滤器：Filter,不单独使用，一般附加在选择器
	。表单相关： :input,:file,:visible,:hidden
	6.4过滤和查找
	。查找：find()，parent(),next(),prev()
	。过滤：filter(),map(),first(),slice()
	6.5操作DOM
	。text(),html():分别获取节点的文本和原始HTML文本
	  无参数调用text()是获取文本，传入参数就变成设置文本，HTML也是类似操作
	。修改css:css('name', 'value')
	$('#test-css li.dy>span').css('background-color', '#ffd351').css('color', 'red');
	。显示和隐藏DOM:show(),hide()
	。获取DOM信息
	$(window).width();
	$(document).width();
	var div = $('#testdiv'); div.width(400);
	。attr()，removeAttr()：用于操作DOM节点的属性
	div.attr('name', 'Hello'); // div的name属性值变为'Hello'
	。操作表单：jQuery对象统一提供val()方法获取和设置对应的value属性
	6.6修改DOM结构
	。添加DOM:html(),append(),prepend(),after()
	。删除DOM:remove()
	6.7事件
	。JavaScript在浏览器中以单线程模式运行，页面加载后，一旦页面上所有的JavaScript代码被执行完后，就只能依赖触发事件来执行JavaScript代码。
	。on()方法绑定
	  var a = $('#test-ling');
	  a.on('click',function(){
	   alert('hello');
	  });
	  //简洁
	  a.click(function(){
	   alert('he');
	  })
	。鼠标事件：click,dblclick,mouseenter...
	。键盘事件：键盘事件仅作用在当前焦点的DOM上，通常是<input>和<textarea>。keydoun,keyup,keypress...
	。其他事件：focus,submit,change,ready...
	。事件参数：有些事件，如mousemove和keypress，我们需要获取鼠标位置和按键的值，否则监听这些事件就没什么意义了。所有事件都会传入Event对象作为参数，可以从Event对象上获取到更多的信息
	。取消绑定：off('click',function)
	6.8动画
	。JavaScript手动实现动画效果，需要编写非常复杂的代码，jQuery简化代码。
	。show/hide
	  div.hide(3000);  //3秒内逐渐消失
	。fadeIn/fadeOut:淡入淡出
	。animate():自定义动画
  6.9AJAX
	。使用jQuery的相关对象来处理AJAX，不但不需要考虑浏览器问题，代码也能大大简化。
	。jQuery在全局对象jQuery（也就是$）绑定了ajax()函数，可以处理AJAX请求
	。get()方法：第二个参数如果是object，jQuery自动把它变成query string然后加到URL后面
	。post()方法：和get()类似，但是传入的第二个参数默认被序列化为application/x-www-form-urlencoded
	6.10扩展
	。扩展jQuery来实现自定义方法，这种方式也称为编写jQuery插件。

7.错误处理
	7.1错误处理
	。执行JavaScript代码的时候，有些情况下会发生错误。
			a.程序写的逻辑不对，导致代码执行异常
			b.执行过程中，程序可能遇到无法预测的异常情况而报错(网络连接中断,没有操作权限等)
	7.2try ... catch ... finally
	。catch(e) {...}在try中有错误时，才会执行；catch和finally可以不必出现
	7.3错误类型
	。Error:js中标准表示错误的对象。派生有TypeError，ReferenceError等，处理错误时，可以通过catch(e)捕获的变量e访问错误对象
	7.4抛出错误
	。程序也可以主动抛出一个错误，让执行流程直接跳转到catch块。抛出错误使用throw语句。
	。JavaScript允许抛出任意对象，包括数字、字符串。但是，最好还是抛出一个Error对象。
	7.4错误传播
	。如果在一个函数内部发生了错误，它自身没有捕获，错误就会被抛到外层调用函数，如果外层函数也没有捕获，
	该错误会一直沿着函数调用链向上抛出，直到被JavaScript引擎捕获，代码终止执行。
	7.5异步错误处理
	。编写JavaScript代码时，时刻牢记，JavaScript引擎是一个事件驱动的执行引擎，
	代码总是以单线程执行，而回调函数的执行需要等到下一个满足条件的事件出现后，才会被执行。

8.underscore
	8.1underscore:第三方开源库。underscore提供了一套完善的函数式编程的接口，让我们更方便地在JavaScript中实现函数式编程。
	js是函数式编程语言，支持高阶函数和闭包。函数式编程非常强大，可以写出非常简洁的代码。例如Array的map()和filter()方法，
	但是Object没有这些方法，低版本浏览器也没有：
	方法一：把这些方法添加到Array.prototype中，然后给Object.prototype也加上mapObject()等类似的方法。
	方法二：直接找一个成熟可靠的第三方开源库，使用统一的函数来实现map()、filter()这些操作。
	
9.Node.js
	9.1支持HTML5的WebKit已经成为手机端的标准。JavaScript是单线程执行，根本不能进行同步IO操作，它只能使用异步IO。
	2009年，Ryan正式推出了基于JavaScript语言和V8引擎的开源Web服务器项目，命名为Node.js。
	在Node上运行的JavaScript相比其他后端开发语言有何优势？
		借助JavaScript天生的事件驱动机制加V8高性能引擎，使编写高性能Web服务轻而易举。
		在Node环境下，通过模块化的JavaScript代码，加上函数式编程，并且无需考虑浏览器兼容性问题，直接使用最新的ECMAScript 6标准，
		可以完全满足工程上的需求。
	9.2安装
	。Node.js平台是在后端运行JavaScript代码，所以，必须首先在本机安装Node环境。
	。npm:Node.js的包管理工具。（node.js安装时顺带）
	









	















